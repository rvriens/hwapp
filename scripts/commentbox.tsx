/// <reference path="./typings/react/react-global.d.ts" />
/// <reference path="./typings/jquery/jquery.d.ts" />

interface MyCommentProps extends React.Props<any> {
    author: string;
    text: string;
}

class MyComment extends React.Component<MyCommentProps, {}> {
    constructor(props, context) {
        super(props, context);
    }

    rawMarkup() {
        var rawMarkup = this.props.text
        return { __html: rawMarkup };
    }

    render() {
        return (
            <div className="comment">
                <h2 className="commentAuthor">
                    {this.props.author}
                </h2>
                <span dangerouslySetInnerHTML={this.rawMarkup() } />
            </div>
        )
    }
}

interface TheComment {
    commentId?: number;
    author: string;
    text: string;
}

interface MyCommentListProps extends React.Props<any> {
    data: TheComment[];
}

class MyCommentList extends React.Component<MyCommentListProps, {}> {
    render() {
        var commentNodes = this.props.data.map(function (comment: TheComment) {
            return (
                <MyComment author={comment.author} key={comment.commentId} text={comment.text}>
                </MyComment>
            );
        });
        return (
            <div className="commentList">
                {commentNodes}
            </div>
        );
    }
};

interface MyCommentFormProps extends React.Props<any> {
    onCommentSubmit(comment: TheComment): void;
}

interface MyCommentFormState {
    id?: string;
    author?: string;
    text?: string;
}

class MyCommentForm extends React.Component<MyCommentFormProps, MyCommentFormState> {
    state:MyCommentFormState;
    constructor(props, context) {
        super(props, context);
        this.state = { author: '', text: '' }
    }

   // getInitialState() : MyCommentFormState {
   //     return { author: '', text: '' };
   // }

    componentDidMount() {
        this.setState({ author: '', text: '' });
    }

    handleAuthorChange(ev) {
        this.setState({ author: ev.target.value });
    }
    handleTextChange(e) {
        this.setState({ text: e.target.value });
    }
    handleSubmit(e) {
        e.preventDefault();
        var author = this.state.author.trim();
        var text = this.state.text.trim();
        if (!text || !author) {
            return;
        }
        this.props.onCommentSubmit({ author: author, text: text });
        this.setState({ author: '', text: '' });
    }
    render() {
        return (
            <form className="commentForm" onSubmit={(e) => this.handleSubmit(e)}>
                <input
                    type="text"
                    placeholder="Your name"
                    value={this.state.author}
                    onChange={(e) => this.handleAuthorChange(e)}
                    />
                <input
                    type="text"
                    placeholder="Say something..."
                    value={this.state.text}
                    onChange={(e) => this.handleTextChange(e)}
                    />
                <input type="submit" value="Post" />
            </form>
        );
    }
};

interface MyCommentBoxProps extends React.Props<any> {
    url: string;
    pollInterval: number;
}

interface MyCommentBoxState {
    data: TheComment[];
}

// tutorial21.js
class MyCommentBox extends React.Component<MyCommentBoxProps, MyCommentBoxState> {
    state: MyCommentBoxState
    constructor(props, context) {
        super(props, context);
        this.state = {data: []};
    }

    loadCommentsFromServer() {
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            success: function (data) {
                this.setState({ data: data });
            }.bind(this),
            error: function (xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    }

    handleCommentSubmit(comment: TheComment) {
        var comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.commentId = Date.now();
        var newComments = comments.concat([comment]);
        this.setState({ data: newComments });
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: comment,
            success: function (data) {
                this.setState({ data: data });
            }.bind(this),
            error: function (xhr, status, err) {
                this.setState({ data: comments });
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    }
    //getInitialState() {
    //    return { data: [] };
    //}

    componentDidMount() {
        this.setState({ data: [] })
        this.loadCommentsFromServer();
        setInterval(() => this.loadCommentsFromServer(), this.props.pollInterval);
    }

    render() {
        return (
            <div className="commentBox">
                <h1>Comments</h1>
                <MyCommentList data={this.state.data} />
                <MyCommentForm onCommentSubmit={(c) => this.handleCommentSubmit(c)} />
            </div>
        );
    }
};



declare var mountNode: HTMLElement;

mountNode = document.getElementById("commentbox");

ReactDOM.render(<MyCommentBox url="/Comment/comments" pollInterval={2000} />, mountNode);